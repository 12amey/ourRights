{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/db/schema.ts"],"sourcesContent":["import { sqliteTable, integer, text } from 'drizzle-orm/sqlite-core';\n\n// Districts table\nexport const districts = sqliteTable('districts', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtCode: text('district_code').notNull().unique(),\n  districtNameEn: text('district_name_en').notNull(),\n  districtNameHi: text('district_name_hi').notNull(),\n  stateName: text('state_name').notNull(),\n  createdAt: text('created_at').notNull(),\n  updatedAt: text('updated_at').notNull(),\n});\n\n// District performance table\nexport const districtPerformance = sqliteTable('district_performance', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  dataDate: text('data_date').notNull(),\n  workCompleted: integer('work_completed').notNull(),\n  fundsUtilizedPercentage: integer('funds_utilized_percentage').notNull(),\n  activeWorkers: integer('active_workers').notNull(),\n  averageWage: integer('average_wage').notNull(),\n  workCompletionRate: integer('work_completion_rate').notNull(),\n  fundUtilizationRate: integer('fund_utilization_rate').notNull(),\n  workerParticipationRate: integer('worker_participation_rate').notNull(),\n  targetWorks: integer('target_works').notNull(),\n  achievementWorks: integer('achievement_works').notNull(),\n  createdAt: text('created_at').notNull(),\n  updatedAt: text('updated_at').notNull(),\n});\n\n// Monthly trends table\nexport const monthlyTrends = sqliteTable('monthly_trends', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  month: integer('month').notNull(),\n  year: integer('year').notNull(),\n  workCompleted: integer('work_completed').notNull(),\n  fundsUtilized: integer('funds_utilized').notNull(),\n  activeWorkers: integer('active_workers').notNull(),\n  createdAt: text('created_at').notNull(),\n});\n\n// Category breakdown table\nexport const categoryBreakdown = sqliteTable('category_breakdown', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  dataDate: text('data_date').notNull(),\n  categoryName: text('category_name').notNull(),\n  percentage: integer('percentage').notNull(),\n  workCount: integer('work_count').notNull(),\n  createdAt: text('created_at').notNull(),\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/db/index.ts"],"sourcesContent":["\nimport { drizzle } from 'drizzle-orm/libsql';\nimport { createClient } from '@libsql/client';\nimport * as schema from '@/db/schema';\n\nconst client = createClient({\n  url: process.env.TURSO_CONNECTION_URL!,\n  authToken: process.env.TURSO_AUTH_TOKEN!,\n});\n\nexport const db = drizzle(client, { schema });\n\nexport type Database = typeof db;"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;;;;;;AAEA,MAAM,SAAS,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,KAAK,QAAQ,GAAG,CAAC,oBAAoB;IACrC,WAAW,QAAQ,GAAG,CAAC,gBAAgB;AACzC;AAEO,MAAM,KAAK,CAAA,GAAA,4PAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/app/api/states/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { db } from '@/db';\nimport { districts } from '@/db/schema';\nimport { sql } from 'drizzle-orm';\n\nexport async function GET() {\n  try {\n    // Get unique states that have districts in the database\n    const statesWithData = await db\n      .select({\n        stateName: districts.stateName,\n      })\n      .from(districts)\n      .groupBy(districts.stateName);\n\n    // Map state names back to codes\n    const STATE_NAME_TO_CODE: Record<string, { code: string; nameHi: string }> = {\n      'Jammu and Kashmir': { code: \"01\", nameHi: \"जम्मू और कश्मीर\" },\n      'Himachal Pradesh': { code: \"02\", nameHi: \"हिमाचल प्रदेश\" },\n      'Punjab': { code: \"03\", nameHi: \"पंजाब\" },\n      'Chandigarh': { code: \"04\", nameHi: \"चंडीगढ़\" },\n      'Uttarakhand': { code: \"05\", nameHi: \"उत्तराखंड\" },\n      'Haryana': { code: \"06\", nameHi: \"हरियाणा\" },\n      'Delhi': { code: \"07\", nameHi: \"दिल्ली\" },\n      'Rajasthan': { code: \"08\", nameHi: \"राजस्थान\" },\n      'Uttar Pradesh': { code: \"09\", nameHi: \"उत्तर प्रदेश\" },\n      'Bihar': { code: \"10\", nameHi: \"बिहार\" },\n      'Sikkim': { code: \"11\", nameHi: \"सिक्किम\" },\n      'Arunachal Pradesh': { code: \"12\", nameHi: \"अरुणाचल प्रदेश\" },\n      'Nagaland': { code: \"13\", nameHi: \"नागालैंड\" },\n      'Manipur': { code: \"14\", nameHi: \"मणिपुर\" },\n      'Mizoram': { code: \"15\", nameHi: \"मिजोरम\" },\n      'Tripura': { code: \"16\", nameHi: \"त्रिपुरा\" },\n      'Meghalaya': { code: \"17\", nameHi: \"मेघालय\" },\n      'Assam': { code: \"18\", nameHi: \"असम\" },\n      'West Bengal': { code: \"19\", nameHi: \"पश्चिम बंगाल\" },\n      'Jharkhand': { code: \"20\", nameHi: \"झारखंड\" },\n      'Odisha': { code: \"21\", nameHi: \"ओडिशा\" },\n      'Chhattisgarh': { code: \"22\", nameHi: \"छत्तीसगढ़\" },\n      'Madhya Pradesh': { code: \"23\", nameHi: \"मध्य प्रदेश\" },\n      'Gujarat': { code: \"24\", nameHi: \"गुजरात\" },\n      'Daman and Diu': { code: \"25\", nameHi: \"दमन और दीव\" },\n      'Dadra and Nagar Haveli': { code: \"26\", nameHi: \"दादरा और नगर हवेली\" },\n      'Maharashtra': { code: \"27\", nameHi: \"महाराष्ट्र\" },\n      'Karnataka': { code: \"28\", nameHi: \"कर्नाटक\" },\n      'Goa': { code: \"29\", nameHi: \"गोवा\" },\n      'Lakshadweep': { code: \"30\", nameHi: \"लक्षद्वीप\" },\n      'Kerala': { code: \"31\", nameHi: \"केरल\" },\n      'Tamil Nadu': { code: \"32\", nameHi: \"तमिलनाडु\" },\n      'Puducherry': { code: \"33\", nameHi: \"पुडुचेरी\" },\n      'Andaman and Nicobar Islands': { code: \"34\", nameHi: \"अंडमान और निकोबार द्वीप समूह\" },\n      'Telangana': { code: \"35\", nameHi: \"तेलंगाना\" },\n      'Andhra Pradesh': { code: \"36\", nameHi: \"आंध्र प्रदेश\" },\n      'Ladakh': { code: \"37\", nameHi: \"लद्दाख\" }\n    };\n\n    // Build the response with only states that have data\n    const availableStates = statesWithData\n      .map(({ stateName }) => {\n        const stateInfo = STATE_NAME_TO_CODE[stateName];\n        if (!stateInfo) return null;\n        \n        return {\n          code: stateInfo.code,\n          nameEn: stateName,\n          nameHi: stateInfo.nameHi\n        };\n      })\n      .filter((state): state is NonNullable<typeof state> => state !== null)\n      .sort((a, b) => a.code.localeCompare(b.code));\n\n    return NextResponse.json({\n      states: availableStates,\n      source: 'database',\n      count: availableStates.length\n    });\n\n  } catch (error) {\n    console.error('States API error:', error);\n    \n    return NextResponse.json({\n      error: 'Failed to load states',\n      message: error instanceof Error ? error.message : 'Unknown error'\n    }, { status: 500 });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}