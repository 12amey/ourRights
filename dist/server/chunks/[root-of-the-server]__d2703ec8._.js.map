{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/db/schema.ts"],"sourcesContent":["import { sqliteTable, integer, text } from 'drizzle-orm/sqlite-core';\n\n// Districts table\nexport const districts = sqliteTable('districts', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtCode: text('district_code').notNull().unique(),\n  districtNameEn: text('district_name_en').notNull(),\n  districtNameHi: text('district_name_hi').notNull(),\n  stateName: text('state_name').notNull(),\n  createdAt: text('created_at').notNull(),\n  updatedAt: text('updated_at').notNull(),\n});\n\n// District performance table\nexport const districtPerformance = sqliteTable('district_performance', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  dataDate: text('data_date').notNull(),\n  workCompleted: integer('work_completed').notNull(),\n  fundsUtilizedPercentage: integer('funds_utilized_percentage').notNull(),\n  activeWorkers: integer('active_workers').notNull(),\n  averageWage: integer('average_wage').notNull(),\n  workCompletionRate: integer('work_completion_rate').notNull(),\n  fundUtilizationRate: integer('fund_utilization_rate').notNull(),\n  workerParticipationRate: integer('worker_participation_rate').notNull(),\n  targetWorks: integer('target_works').notNull(),\n  achievementWorks: integer('achievement_works').notNull(),\n  createdAt: text('created_at').notNull(),\n  updatedAt: text('updated_at').notNull(),\n});\n\n// Monthly trends table\nexport const monthlyTrends = sqliteTable('monthly_trends', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  month: integer('month').notNull(),\n  year: integer('year').notNull(),\n  workCompleted: integer('work_completed').notNull(),\n  fundsUtilized: integer('funds_utilized').notNull(),\n  activeWorkers: integer('active_workers').notNull(),\n  createdAt: text('created_at').notNull(),\n});\n\n// Category breakdown table\nexport const categoryBreakdown = sqliteTable('category_breakdown', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  dataDate: text('data_date').notNull(),\n  categoryName: text('category_name').notNull(),\n  percentage: integer('percentage').notNull(),\n  workCount: integer('work_count').notNull(),\n  createdAt: text('created_at').notNull(),\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/db/index.ts"],"sourcesContent":["\nimport { drizzle } from 'drizzle-orm/libsql';\nimport { createClient } from '@libsql/client';\nimport * as schema from '@/db/schema';\n\nconst client = createClient({\n  url: process.env.TURSO_CONNECTION_URL!,\n  authToken: process.env.TURSO_AUTH_TOKEN!,\n});\n\nexport const db = drizzle(client, { schema });\n\nexport type Database = typeof db;"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;;;;;;AAEA,MAAM,SAAS,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,KAAK,QAAQ,GAAG,CAAC,oBAAoB;IACrC,WAAW,QAAQ,GAAG,CAAC,gBAAgB;AACzC;AAEO,MAAM,KAAK,CAAA,GAAA,4PAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/app/api/states/%5BstateCode%5D/districts/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/db';\nimport { districts } from '@/db/schema';\nimport { eq } from 'drizzle-orm';\n\ninterface RouteContext {\n  params: Promise<{ stateCode: string }>;\n}\n\n// Map state codes to state names\nconst STATE_CODE_MAP: Record<string, string> = {\n  '01': 'Jammu and Kashmir',\n  '02': 'Himachal Pradesh',\n  '03': 'Punjab',\n  '04': 'Chandigarh',\n  '05': 'Uttarakhand',\n  '06': 'Haryana',\n  '07': 'Delhi',\n  '08': 'Rajasthan',\n  '09': 'Uttar Pradesh',\n  '10': 'Bihar',\n  '11': 'Sikkim',\n  '12': 'Arunachal Pradesh',\n  '13': 'Nagaland',\n  '14': 'Manipur',\n  '15': 'Mizoram',\n  '16': 'Tripura',\n  '17': 'Meghalaya',\n  '18': 'Assam',\n  '19': 'West Bengal',\n  '20': 'Jharkhand',\n  '21': 'Odisha',\n  '22': 'Chhattisgarh',\n  '23': 'Madhya Pradesh',\n  '24': 'Gujarat',\n  '25': 'Daman and Diu',\n  '26': 'Dadra and Nagar Haveli',\n  '27': 'Maharashtra',\n  '28': 'Karnataka',\n  '29': 'Goa',\n  '30': 'Lakshadweep',\n  '31': 'Kerala',\n  '32': 'Tamil Nadu',\n  '33': 'Puducherry',\n  '34': 'Andaman and Nicobar Islands',\n  '35': 'Telangana',\n  '36': 'Andhra Pradesh',\n  '37': 'Ladakh',\n};\n\nexport async function GET(request: NextRequest, context: RouteContext) {\n  try {\n    const { stateCode } = await context.params;\n\n    if (!stateCode) {\n      return NextResponse.json(\n        { error: 'State code is required', code: 'MISSING_STATE_CODE' },\n        { status: 400 }\n      );\n    }\n\n    // Get state name from code\n    const stateName = STATE_CODE_MAP[stateCode];\n    \n    if (!stateName) {\n      return NextResponse.json(\n        { error: 'Invalid state code', code: 'INVALID_STATE_CODE' },\n        { status: 400 }\n      );\n    }\n\n    // Fetch districts from database\n    const dbDistricts = await db\n      .select({\n        code: districts.districtCode,\n        nameEn: districts.districtNameEn,\n        nameHi: districts.districtNameHi,\n      })\n      .from(districts)\n      .where(eq(districts.stateName, stateName))\n      .orderBy(districts.districtNameEn);\n\n    return NextResponse.json({\n      stateCode,\n      stateName,\n      districts: dbDistricts,\n      count: dbDistricts.length,\n      source: 'database'\n    });\n\n  } catch (error) {\n    console.error('Districts API error:', error);\n    \n    return NextResponse.json(\n      { \n        error: 'Internal server error',\n        code: 'INTERNAL_ERROR',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;;;;;AAMA,iCAAiC;AACjC,MAAM,iBAAyC;IAC7C,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;IACN,MAAM;AACR;AAEO,eAAe,IAAI,OAAoB,EAAE,OAAqB;IACnE,IAAI;QACF,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,QAAQ,MAAM;QAE1C,IAAI,CAAC,WAAW;YACd,OAAO,wNAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAA0B,MAAM;YAAqB,GAC9D;gBAAE,QAAQ;YAAI;QAElB;QAEA,2BAA2B;QAC3B,MAAM,YAAY,cAAc,CAAC,UAAU;QAE3C,IAAI,CAAC,WAAW;YACd,OAAO,wNAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;gBAAsB,MAAM;YAAqB,GAC1D;gBAAE,QAAQ;YAAI;QAElB;QAEA,gCAAgC;QAChC,MAAM,cAAc,MAAM,4MAAA,CAAA,KAAE,CACzB,MAAM,CAAC;YACN,MAAM,6MAAA,CAAA,YAAS,CAAC,YAAY;YAC5B,QAAQ,6MAAA,CAAA,YAAS,CAAC,cAAc;YAChC,QAAQ,6MAAA,CAAA,YAAS,CAAC,cAAc;QAClC,GACC,IAAI,CAAC,6MAAA,CAAA,YAAS,EACd,KAAK,CAAC,CAAA,GAAA,4PAAA,CAAA,KAAE,AAAD,EAAE,6MAAA,CAAA,YAAS,CAAC,SAAS,EAAE,YAC9B,OAAO,CAAC,6MAAA,CAAA,YAAS,CAAC,cAAc;QAEnC,OAAO,wNAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA,WAAW;YACX,OAAO,YAAY,MAAM;YACzB,QAAQ;QACV;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QAEtC,OAAO,wNAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,OAAO;YACP,MAAM;YACN,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}