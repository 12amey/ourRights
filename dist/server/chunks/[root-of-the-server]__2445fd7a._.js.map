{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/db/schema.ts"],"sourcesContent":["import { sqliteTable, integer, text } from 'drizzle-orm/sqlite-core';\n\n// Districts table\nexport const districts = sqliteTable('districts', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtCode: text('district_code').notNull().unique(),\n  districtNameEn: text('district_name_en').notNull(),\n  districtNameHi: text('district_name_hi').notNull(),\n  stateName: text('state_name').notNull(),\n  createdAt: text('created_at').notNull(),\n  updatedAt: text('updated_at').notNull(),\n});\n\n// District performance table\nexport const districtPerformance = sqliteTable('district_performance', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  dataDate: text('data_date').notNull(),\n  workCompleted: integer('work_completed').notNull(),\n  fundsUtilizedPercentage: integer('funds_utilized_percentage').notNull(),\n  activeWorkers: integer('active_workers').notNull(),\n  averageWage: integer('average_wage').notNull(),\n  workCompletionRate: integer('work_completion_rate').notNull(),\n  fundUtilizationRate: integer('fund_utilization_rate').notNull(),\n  workerParticipationRate: integer('worker_participation_rate').notNull(),\n  targetWorks: integer('target_works').notNull(),\n  achievementWorks: integer('achievement_works').notNull(),\n  createdAt: text('created_at').notNull(),\n  updatedAt: text('updated_at').notNull(),\n});\n\n// Monthly trends table\nexport const monthlyTrends = sqliteTable('monthly_trends', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  month: integer('month').notNull(),\n  year: integer('year').notNull(),\n  workCompleted: integer('work_completed').notNull(),\n  fundsUtilized: integer('funds_utilized').notNull(),\n  activeWorkers: integer('active_workers').notNull(),\n  createdAt: text('created_at').notNull(),\n});\n\n// Category breakdown table\nexport const categoryBreakdown = sqliteTable('category_breakdown', {\n  id: integer('id').primaryKey({ autoIncrement: true }),\n  districtId: integer('district_id').notNull().references(() => districts.id),\n  dataDate: text('data_date').notNull(),\n  categoryName: text('category_name').notNull(),\n  percentage: integer('percentage').notNull(),\n  workCount: integer('work_count').notNull(),\n  createdAt: text('created_at').notNull(),\n});"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 138, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/db/index.ts"],"sourcesContent":["\nimport { drizzle } from 'drizzle-orm/libsql';\nimport { createClient } from '@libsql/client';\nimport * as schema from '@/db/schema';\n\nconst client = createClient({\n  url: process.env.TURSO_CONNECTION_URL!,\n  authToken: process.env.TURSO_AUTH_TOKEN!,\n});\n\nexport const db = drizzle(client, { schema });\n\nexport type Database = typeof db;"],"names":[],"mappings":";;;AACA;AACA;AACA;;;;;;;;;AAEA,MAAM,SAAS,CAAA,GAAA,oIAAA,CAAA,eAAY,AAAD,EAAE;IAC1B,KAAK,QAAQ,GAAG,CAAC,oBAAoB;IACrC,WAAW,QAAQ,GAAG,CAAC,gBAAgB;AACzC;AAEO,MAAM,KAAK,CAAA,GAAA,4PAAA,CAAA,UAAO,AAAD,EAAE,QAAQ;IAAE,QAAA;AAAO","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/deshm/Downloads/mgnrega-district-dashboard-main/mgnrega-district-dashboard-main/src/app/api/mgnrega-data/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/db';\nimport { districts, districtPerformance, monthlyTrends, categoryBreakdown } from '@/db/schema';\nimport { eq, desc } from 'drizzle-orm';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const districtCode = searchParams.get('district');\n\n    // Validation: Check if district parameter is provided\n    if (!districtCode) {\n      return NextResponse.json(\n        { \n          error: 'District code is required. Please provide a district code in the query parameter.',\n          code: 'MISSING_DISTRICT_CODE',\n          example: '/api/mgnrega-data?district=1807'\n        },\n        { status: 400 }\n      );\n    }\n\n    // Step 1: Find district by districtCode\n    const districtResult = await db\n      .select()\n      .from(districts)\n      .where(eq(districts.districtCode, districtCode))\n      .limit(1);\n\n    if (districtResult.length === 0) {\n      return NextResponse.json(\n        { \n          error: `No MGNREGA data available for district code: ${districtCode}. The database does not contain information for this district yet.`,\n          code: 'DISTRICT_NOT_FOUND',\n          districtCode,\n          suggestion: 'Please check if the district code is correct. Available district codes are from Maharashtra (18xx format).'\n        },\n        { status: 404 }\n      );\n    }\n\n    const district = districtResult[0];\n\n    // Step 2: Get latest performance data\n    const performanceResult = await db\n      .select()\n      .from(districtPerformance)\n      .where(eq(districtPerformance.districtId, district.id))\n      .orderBy(desc(districtPerformance.dataDate))\n      .limit(1);\n\n    if (performanceResult.length === 0) {\n      return NextResponse.json(\n        { \n          error: `District \"${district.districtNameEn}\" (${districtCode}) exists but has no performance data available yet.`,\n          code: 'NO_PERFORMANCE_DATA',\n          district: {\n            code: district.districtCode,\n            nameEn: district.districtNameEn,\n            nameHi: district.districtNameHi,\n            state: district.stateName\n          },\n          suggestion: 'Real MGNREGA data needs to be synced from the official API. Currently, no data is available for this district.'\n        },\n        { status: 404 }\n      );\n    }\n\n    const performance = {\n      workCompleted: performanceResult[0].workCompleted,\n      fundsUtilizedPercentage: performanceResult[0].fundsUtilizedPercentage,\n      activeWorkers: performanceResult[0].activeWorkers,\n      averageWage: performanceResult[0].averageWage,\n      workCompletionRate: performanceResult[0].workCompletionRate,\n      fundUtilizationRate: performanceResult[0].fundUtilizationRate,\n      workerParticipationRate: performanceResult[0].workerParticipationRate,\n      targetWorks: performanceResult[0].targetWorks,\n      achievementWorks: performanceResult[0].achievementWorks,\n      dataDate: performanceResult[0].dataDate,\n    };\n\n    // Step 3: Get last 12 months of monthly trends\n    const trendsResult = await db\n      .select()\n      .from(monthlyTrends)\n      .where(eq(monthlyTrends.districtId, district.id))\n      .orderBy(desc(monthlyTrends.year), desc(monthlyTrends.month))\n      .limit(12);\n\n    const trends = trendsResult.map(trend => ({\n      month: trend.month,\n      year: trend.year,\n      workCompleted: trend.workCompleted,\n      fundsUtilized: trend.fundsUtilized,\n      activeWorkers: trend.activeWorkers,\n    }));\n\n    // Step 4: Get category breakdown for the latest dataDate\n    const categoryResult = await db\n      .select()\n      .from(categoryBreakdown)\n      .where(eq(categoryBreakdown.districtId, district.id))\n      .orderBy(desc(categoryBreakdown.dataDate))\n      .limit(100);\n\n    // Filter categories by the latest dataDate\n    const latestDataDate = performance.dataDate;\n    const categories = categoryResult\n      .filter(cat => cat.dataDate === latestDataDate)\n      .map(cat => ({\n        categoryName: cat.categoryName,\n        percentage: cat.percentage,\n        workCount: cat.workCount,\n      }));\n\n    // Step 5: Return combined response\n    return NextResponse.json({\n      district: {\n        id: district.id,\n        districtCode: district.districtCode,\n        districtNameEn: district.districtNameEn,\n        districtNameHi: district.districtNameHi,\n        stateName: district.stateName,\n      },\n      performance,\n      monthlyTrends: trends,\n      categoryBreakdown: categories,\n      dataSource: 'database',\n      lastUpdated: performance.dataDate\n    });\n\n  } catch (error) {\n    console.error('MGNREGA Data API error:', error);\n    return NextResponse.json(\n      { \n        error: 'Internal server error occurred while fetching MGNREGA data.',\n        code: 'INTERNAL_ERROR',\n        details: error instanceof Error ? error.message : 'Unknown error',\n        suggestion: 'Please try again later or contact support if the issue persists.'\n      },\n      { status: 500 }\n    );\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}